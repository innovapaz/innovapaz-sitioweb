---
import { Icons } from "./icons.ts";
import { Icon as AstroIcon } from "astro-icon/components";

interface Props {
  name: string;
  class?: string;
  size?: string;
}

const { name, class: className = "", size = "24px" } = Astro.props;

// Check if name includes ':' indicating it's an iconify icon (e.g., "mdi:heart")
const isIconify = name.includes(':');

// For custom icons from the Icons object
let icon = !isIconify ? (Icons as any)[name] || {} : {};
let paths = !isIconify ? icon.paths || [] : [];

// Generate classes for both custom and iconify icons
const customIconClass = [
  icon.class,
  className
].filter(Boolean).join(" ");

const iconifyClass = [
  `size-${size.replace('px', '')}`,
  className
].filter(Boolean).join(" ");
---

{isIconify ? (
  <AstroIcon name={name} class={iconifyClass} />
) : (
  <svg 
    class={customIconClass}
    viewBox={icon.viewBox}
    fill={icon.fill}
    stroke={icon.stroke}
    stroke-width={icon.strokeWidth}
    stroke-linecap={icon.strokeLinecap}
    stroke-linejoin={icon.strokeLinejoin}
  >
    <title>{icon.title}</title>
    {paths.map((path: any) => (
      <path d={path.d} class={path.class || ""} />
    ))}
  </svg>
)}